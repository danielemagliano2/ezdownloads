---
import Layout from '../layouts/Layout.astro';
import downloadsRaw from '../data/downloads.json';
import { decorateEntry } from '../lib/processDownloads';
import type { DownloadEntryRaw } from '../lib/types';

export async function getStaticPaths() {
  return (downloadsRaw as DownloadEntryRaw[])
    .map(decorateEntry)
    .filter(Boolean)
    .map((item) => ({
      params: { slug: item!.slug },
      props:  { item: item! }
    }));
}

interface Props {
  item: ReturnType<typeof decorateEntry>;
}

const { item } = Astro.props as Props;

const hasVideo     = !!item.ytVideoId;
const thumbnailUrl = item.thumbUrl;
const downloadUrl  = item.downloadUrl;
const finalLink    = item.externalUrl ?? downloadUrl;
const youtubeEmbed = hasVideo
  ? `https://www.youtube.com/embed/${item.ytVideoId}`
  : null;
---

<Layout title={item.title}>
  <main class="max-w-4xl mx-auto space-y-6 relative">
    <h1 class="text-4xl font-bold text-[--white]">{item.title}</h1>

    <div class="rounded-lg border border-[#1f1f1f] bg-[#181818] p-4">
      <div class="flex items-center justify-between mb-4">
        <span class="text-lg font-semibold text-[--white]">Preview</span>
        {hasVideo && (
          <div class="flex gap-2">
            <button id="btnThumb" class="px-3 py-1 text-sm rounded border border-zinc-600 bg-zinc-700 text-white">Thumbnail</button>
            <button id="btnVideo" class="px-3 py-1 text-sm rounded border border-zinc-600 bg-zinc-700 text-white">YouTube Trailer</button>
          </div>
        )}
      </div>

      <div class="aspect-video max-w-2xl mx-auto rounded overflow-hidden relative">
        <img id="thumb" src={thumbnailUrl} alt={item.title} class="absolute inset-0 w-full h-full object-cover" />
        {hasVideo && (
          <iframe id="video" src={youtubeEmbed} class="absolute inset-0 w-full h-full hidden" allowfullscreen></iframe>
        )}
      </div>
    </div>

    <div class="prose prose-invert max-w-none text-[--white]">
      <p class="whitespace-pre-wrap">{item.description}</p>
    </div>

    <div class="text-center mt-6">
      <button id="startDownload" class="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg text-lg">
        ⬇ Download
      </button>
    </div>

    <div id="downloadModal" class="fixed inset-0 w-screen h-screen z-60 bg-black/70 hidden flex items-center justify-center">
      <div class="bg-[#181818]/80 backdrop-blur-lg text-white rounded-lg p-8 shadow-lg w-[90%] max-w-lg relative text-center">
        <button id="closeModal" class="absolute top-3 right-4 text-white text-2xl hover:text-red-500">&times;</button>

        <h2 class="text-2xl font-bold mb-4">Preparing Download</h2>
        <p class="text-lg mb-6">
          Download will be ready in:
          <span id="modalTimer" class="font-mono">2:00</span>
        </p>

        <div id="realDownloadBtn" class="hidden">
          <a href={finalLink} {...(item.externalUrl ? { target: '_blank' } : { download: true })}>
            <button class="px-6 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg text-lg">
              ✅ Start Download
            </button>
          </a>
        </div>
      </div>
    </div>
  </main>

  <!-- External loader -->
  <script src="/assets/x/loader.obf.js" defer></script>

  <!-- Modal & toggle logic -->
  <script is:inline>
    const duration = 120;
    let startTime = null;
    let intervalId = null;

    window.addEventListener('load', () => {
      const startBtn    = document.getElementById('startDownload');
      const modal       = document.getElementById('downloadModal');
      const closeBtn    = document.getElementById('closeModal');
      const timerSpan   = document.getElementById('modalTimer');
      const realBtnWrap = document.getElementById('realDownloadBtn');

      const thumb = document.getElementById('thumb');
      const video = document.getElementById('video');
      const btnThumb = document.getElementById('btnThumb');
      const btnVideo = document.getElementById('btnVideo');

      const hasVideo = !!video;

      if (startBtn) {
        startBtn.addEventListener('click', () => {
          modal.classList.remove('hidden');
          if (!startTime) {
            startTime = Date.now();
            intervalId = setInterval(updateTimer, 1000);
            updateTimer();
          }
        });
      }

      if (closeBtn) {
        closeBtn.addEventListener('click', () => {
          modal.classList.add('hidden');
        });
      }

      if (hasVideo && btnThumb && btnVideo) {
        btnThumb.addEventListener('click', () => {
          thumb.classList.remove('hidden');
          video.classList.add('hidden');
          btnThumb.classList.add('bg-blue-600');
          btnVideo.classList.remove('bg-blue-600');
        });

        btnVideo.addEventListener('click', () => {
          thumb.classList.add('hidden');
          video.classList.remove('hidden');
          btnVideo.classList.add('bg-blue-600');
          btnThumb.classList.remove('bg-blue-600');
        });

        // Default to video
        thumb.classList.add('hidden');
        video.classList.remove('hidden');
        btnVideo.classList.add('bg-blue-600');
      }

      function updateTimer() {
        const elapsed = Math.floor((Date.now() - startTime) / 1000);
        const remaining = duration - elapsed;
        if (remaining <= 0) {
          timerSpan.textContent = '0:00';
          realBtnWrap.classList.remove('hidden');
          clearInterval(intervalId);
          return;
        }
        timerSpan.textContent = `${Math.floor(remaining / 60)}:${String(remaining % 60).padStart(2, '0')}`;
      }
    });
  </script>
</Layout>
