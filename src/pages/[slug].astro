---
import Layout from '../layouts/Layout.astro';
import downloadsRaw from '../data/downloads.json';

import { decorateEntry }      from '../lib/processDownloads';
import type { DownloadEntryRaw } from '../lib/types';

export async function getStaticPaths() {
  return (downloadsRaw as DownloadEntryRaw[]).map(item => ({
    params: { slug: item.slug },
    props:  { item }
  }));
}

const { item } = Astro.props as { item: DownloadEntryRaw };
const decorated   = decorateEntry(item);

const hasVideo    = !!item.ytVideoId;
const thumbnailUrl = decorated.thumbUrl;
const downloadUrl  = decorated.downloadUrl;
const finalLink    = item.externalUrl ?? downloadUrl;

const youtubeEmbed = hasVideo
  ? `https://www.youtube.com/embed/${item.ytVideoId}`
  : null;
---

<Layout title={item.title}>
  <main class="max-w-4xl mx-auto space-y-6 relative">
    <h1 class="text-4xl font-bold text-[--white]">{item.title}</h1>

    <!-- Preview --------------------------------------------------------- -->
    <div class="rounded-lg border border-[#1f1f1f] bg-[#181818] p-4">
      <div class="flex items-center justify-between mb-4">
        <span class="text-lg font-semibold text-[--white]">Preview</span>
        {hasVideo && (
          <div class="flex gap-2">
            <button
              id="btnThumb"
              class="px-3 py-1 text-sm rounded border border-zinc-600 bg-zinc-700 text-white"
            >
              Thumbnail
            </button>
            <button
              id="btnVideo"
              class="px-3 py-1 text-sm rounded border border-zinc-600 bg-zinc-700 text-white"
            >
              YouTube Trailer
            </button>
          </div>
        )}
      </div>

      <div class="aspect-video max-w-2xl mx-auto rounded overflow-hidden relative">
        <img
          id="thumb"
          src={thumbnailUrl}
          alt={item.title}
          class="absolute inset-0 w-full h-full object-cover"
        />
        {hasVideo && (
          <iframe
            id="video"
            src={youtubeEmbed}
            class="absolute inset-0 w-full h-full hidden"
            frameborder="0"
            allowfullscreen
          ></iframe>
        )}
      </div>
    </div>

    <!-- Description ----------------------------------------------------- -->
    <div class="prose prose-invert max-w-none text-[--white]">
      <p class="whitespace-pre-wrap">{item.description}</p>
    </div>

    <!-- Primary Download button ----------------------------------------- -->
    <div class="text-center mt-6">
      <button
        id="startDownload"
        class="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg text-lg"
      >
        ⬇ Download
      </button>
    </div>

    <!-- Modal ----------------------------------------------------------- -->
    <div
      id="downloadModal"
      class="fixed inset-0 w-screen h-screen z-60 bg-black/70 hidden flex items-center justify-center"
    >
      <div class="bg-[#181818]/80 backdrop-blur-lg text-white rounded-lg p-8 shadow-lg w-[90%] max-w-lg relative text-center">
        <button
          id="closeModal"
          class="absolute top-3 right-4 text-white text-2xl hover:text-red-500"
        >
          &times;
        </button>

        <h2 class="text-2xl font-bold mb-4">Preparing Download</h2>
        <p class="text-lg mb-6">
          Download will be ready in:
          <span id="modalTimer" class="font-mono">2:00</span>
        </p>

        <div id="realDownloadBtn" class="hidden">
          <a
            href={finalLink}
            {...(item.externalUrl ? { target: '_blank' } : { download: true })}
          >
            <button class="px-6 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg text-lg">
              ✅ Start Download
            </button>
          </a>
        </div>
      </div>
    </div>
  </main>

  <!-- JS ---------------------------------------------------------------- -->
  <script is:inline>
    const duration = 120; // seconds
    let startTime = null;
    let intervalId = null;

    document.addEventListener('DOMContentLoaded', () => {
      /***** 1) Immediately load Bablosoft CustomServers “clientsafe.js” *****/
      const bs = document.createElement('script');
      bs.src = '//customfingerprints.bablosoft.com/clientsafe.js';
      bs.onload = () => {
        ProcessFingerprint(
          false,
          'dgnmbv5ahw136jqdnupmmb5b2n69jx30qxvgdkf08xptvrtckl31jpke8lrdjfds'
        );
      };
      bs.onerror = () => console.error('Failed to load CustomServers script');
      document.head.appendChild(bs);

      /***** 2) Preview toggle logic *****/
      const thumb    = document.getElementById('thumb');
      const video    = document.getElementById('video');
      const btnThumb = document.getElementById('btnThumb');
      const btnVideo = document.getElementById('btnVideo');

      function switchPreview(mode) {
        const add = (el) => el.classList.add('bg-blue-600', 'text-white');
        const rem = (el) => el.classList.remove('bg-blue-600', 'text-white');
        if (mode === 'thumb') {
          thumb.style.display = 'block';
          if (video) video.style.display = 'none';
          add(btnThumb);
          rem(btnVideo);
        } else {
          thumb.style.display = 'none';
          if (video) video.style.display = 'block';
          add(btnVideo);
          rem(btnThumb);
        }
      }

      if (btnThumb && btnVideo) {
        btnThumb.onclick = () => switchPreview('thumb');
        btnVideo.onclick = () => switchPreview('video');
        switchPreview('video');
      }

      /***** 3) Modal & timer logic *****/
      const modal       = document.getElementById('downloadModal');
      const startBtn    = document.getElementById('startDownload');
      const closeBtn    = document.getElementById('closeModal');
      const timerSpan   = document.getElementById('modalTimer');
      const realBtnWrap = document.getElementById('realDownloadBtn');

      startBtn.onclick = () => {
        modal.classList.remove('hidden');
        if (!startTime) {
          startTime  = Date.now();
          intervalId = setInterval(updateTimer, 1000);
          updateTimer();
        } else {
          updateTimer();
        }
      };

      closeBtn.onclick = () => modal.classList.add('hidden');

      function updateTimer() {
        const elapsed   = Math.floor((Date.now() - startTime) / 1000);
        const remaining = duration - elapsed;
        if (remaining <= 0) {
          timerSpan.textContent = '0:00';
          realBtnWrap.classList.remove('hidden');
          clearInterval(intervalId);
          return;
        }
        const m = Math.floor(remaining / 60);
        const s = remaining % 60;
        timerSpan.textContent = `${m}:${s.toString().padStart(2, '0')}`;
      }
    });
  </script>
</Layout>
